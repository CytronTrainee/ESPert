// Pac-Man Simulator for ESPresso Lite

#ifndef _GAME_PAC_MAN_H_
#define _GAME_PAC_MAN_H_

#include "Game.h"

namespace pacMan {
// OLED bitmaps - Image to Adafruit OLED Bitmap Converter http://www.majer.ch/lcd/adf_bitmap.php
const uint8_t titleBitmap[(128 * 32) / 8] PROGMEM = { // title.png
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xE7, 0xFB,
  0x1D, 0x0D, 0xE6, 0x26, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6,
  0xA6, 0xA6, 0xE6, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0xC6,
  0x26, 0xC6, 0x46, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x06, 0x86, 0x86, 0x46, 0x46, 0xC6, 0xC6, 0xC6, 0x86, 0x86,
  0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xE6, 0x46,
  0x86, 0xE6, 0xC6, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x86, 0x46, 0xA6, 0xC6, 0x86, 0x06, 0x06, 0x06, 0x06, 0xC6,
  0x26, 0xC6, 0x46, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0xE6, 0x46, 0xE6, 0xC6, 0x86, 0x06, 0xE6, 0x26, 0xA6, 0xA6,
  0xA6, 0xA6, 0xA6, 0xE6, 0x86, 0x06, 0x06, 0x0D, 0x1D, 0xFB,
  0xE7, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00,
  0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x80, 0x61, 0x02, 0xFC, 0xFC, 0x33, 0x0C, 0x03, 0xC0,
  0xC0, 0x03, 0x0F, 0x3C, 0xF0, 0xC0, 0xF8, 0x06, 0xF1, 0x0C,
  0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xB1,
  0x19, 0x0E, 0x04, 0x00, 0x00, 0x3C, 0xF4, 0x94, 0x94, 0x94,
  0x94, 0x94, 0x9C, 0xF0, 0xE0, 0x00, 0xFF, 0x00, 0xFF, 0x00,
  0x01, 0x03, 0x07, 0x0E, 0x1C, 0x1C, 0x0A, 0x05, 0x02, 0x01,
  0x00, 0xFF, 0xFF, 0xC0, 0x30, 0xCC, 0x33, 0x0C, 0x03, 0xC0,
  0xC0, 0x03, 0x0F, 0x3C, 0xF0, 0xC0, 0x00, 0x00, 0xFF, 0x00,
  0xFF, 0x01, 0x03, 0x07, 0x0F, 0x10, 0x3F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x1F, 0x10,
  0x7F, 0xC0, 0xD0, 0xD0, 0xD0, 0xDF, 0xC1, 0xFD, 0xFD, 0x2C,
  0x7E, 0xCF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
  0xD0, 0xD4, 0xD8, 0xD3, 0xCF, 0xFC, 0xF3, 0xEC, 0x50, 0x60,
  0x60, 0x40, 0xC0, 0xD0, 0xD2, 0xD4, 0xC9, 0xE2, 0x65, 0x7A,
  0x3C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x00, 0x3F, 0x20, 0x7F, 0xC0, 0xC0, 0xC0,
  0xC0, 0xC0, 0xC0, 0xC0, 0xD0, 0xD0, 0xD0, 0xDE, 0xC0, 0xFF,
  0xFF, 0xCC, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
  0xD0, 0xD4, 0xD8, 0xD3, 0xCF, 0xFC, 0xFF, 0xF0, 0xFF, 0xC0,
  0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xD0, 0xD0, 0xD0, 0xDE, 0xC0,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFC, 0xFB, 0xF7, 0xF6, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC,
  0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xEC, 0xFC, 0x44,
  0x54, 0x14, 0xFC, 0x14, 0xFC, 0x1C, 0xDC, 0x3C, 0xDC, 0x1C,
  0xFC, 0x1C, 0x7C, 0x1C, 0xFC, 0x04, 0xFC, 0x5C, 0x5C, 0x3C,
  0xFC, 0x04, 0x6C, 0xFC, 0x1C, 0x5C, 0x1C, 0xFC, 0x1C, 0xDC,
  0xFC, 0xEE, 0xF7, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF
};

const uint8_t characterNicknameBitmap[(104 * 8) / 8] PROGMEM = { // characterNickname.png
  0xF1, 0xEE, 0xEE, 0xEE, 0xF5, 0xFF, 0xE0, 0xFB, 0xFB, 0xE0,
  0xFF, 0xE1, 0xFA, 0xFA, 0xE1, 0xFF, 0xE0, 0xFA, 0xF2, 0xED,
  0xFF, 0xE1, 0xFA, 0xFA, 0xE1, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE,
  0xF5, 0xFF, 0xFE, 0xE0, 0xFE, 0xFF, 0xE0, 0xEA, 0xEA, 0xEE,
  0xFF, 0xE0, 0xFA, 0xF2, 0xED, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xEF, 0xF7, 0xFB, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xE0, 0xF9, 0xF3, 0xE0, 0xFF, 0xEE, 0xE0,
  0xEE, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF5, 0xFF, 0xE0, 0xFB,
  0xF1, 0xE4, 0xFF, 0xE0, 0xF9, 0xF3, 0xE0, 0xFF, 0xE1, 0xFA,
  0xFA, 0xE1, 0xFF, 0xE0, 0xFD, 0xFB, 0xFD, 0xE0, 0xFF, 0xE0,
  0xEA, 0xEA, 0xEE, 0xFF
};

static const int numberOfGhosts = 4;
const uint8_t characterBitmap[numberOfGhosts][(40 * 8) / 8] PROGMEM = {
  {0xFB, 0xFB, 0xFB, 0xFF, 0xFF, 0xED, 0xEA, 0xEA, 0xF6, 0xFF, 0xE0, 0xFB, 0xFB, 0xE0, 0xFF, 0xE1, 0xFA, 0xFA, 0xE1, 0xFF, 0xE0, 0xEE, 0xEE, 0xF1, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF1, 0xFF, 0xE0, 0xF7, 0xFB, 0xF7, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF}, // shadow.png
  {0xFB, 0xFB, 0xFB, 0xFF, 0xFF, 0xED, 0xEA, 0xEA, 0xF6, 0xFF, 0xE0, 0xFA, 0xFA, 0xFD, 0xFF, 0xE0, 0xEA, 0xEA, 0xEE, 0xFF, 0xE0, 0xEA, 0xEA, 0xEE, 0xFF, 0xE0, 0xEE, 0xEE, 0xF1, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // speedy.png
  {0xFB, 0xFB, 0xFB, 0xFF, 0xFF, 0xE0, 0xEA, 0xEA, 0xF5, 0xFF, 0xE1, 0xFA, 0xFA, 0xE1, 0xFF, 0xED, 0xEA, 0xEA, 0xF6, 0xFF, 0xE0, 0xFB, 0xFB, 0xE0, 0xFF, 0xE0, 0xFA, 0xFA, 0xFE, 0xFF, 0xF0, 0xEF, 0xEF, 0xEF, 0xF0, 0xFF, 0xE0, 0xEF, 0xEF, 0xEF}, // bashful.png
  {0xFB, 0xFB, 0xFB, 0xFF, 0xFF, 0xE0, 0xFA, 0xFA, 0xFD, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF1, 0xFF, 0xE0, 0xFB, 0xF1, 0xE4, 0xFF, 0xE0, 0xEA, 0xEA, 0xEE, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pokey.png
};

const uint8_t nicknameBitmap[numberOfGhosts][(40 * 8) / 8] PROGMEM = {
  {0xFC, 0xFF, 0xFC, 0xFF, 0xE0, 0xEA, 0xEA, 0xF5, 0xFF, 0xE0, 0xEF, 0xEF, 0xEF, 0xFF, 0xEE, 0xE0, 0xEE, 0xFF, 0xE0, 0xF9, 0xF3, 0xE0, 0xFF, 0xE0, 0xFB, 0xF1, 0xE4, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // blinky.png
  {0xFC, 0xFF, 0xFC, 0xFF, 0xE0, 0xFA, 0xFA, 0xFD, 0xFF, 0xEE, 0xE0, 0xEE, 0xFF, 0xE0, 0xF9, 0xF3, 0xE0, 0xFF, 0xE0, 0xFB, 0xF1, 0xE4, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xFC, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pinky.png
  {0xFC, 0xFF, 0xFC, 0xFF, 0xEE, 0xE0, 0xEE, 0xFF, 0xE0, 0xF9, 0xF3, 0xE0, 0xFF, 0xE0, 0xFB, 0xF1, 0xE4, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xFC, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // inky.png
  {0xFC, 0xFF, 0xFC, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF5, 0xFF, 0xE0, 0xEF, 0xEF, 0xEF, 0xFF, 0xFC, 0xFB, 0xE3, 0xFB, 0xFC, 0xFF, 0xE0, 0xEE, 0xEE, 0xF1, 0xFF, 0xE0, 0xEA, 0xEA, 0xEE, 0xFF, 0xFC, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // clyde.png
};

const uint8_t ptsBitmap[(40 * 16) / 8] PROGMEM = { // pts.png
  0xFF, 0xF3, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED, 0xE0, 0xEF, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xFA, 0xFA, 0xFD, 0xFF, 0xFE, 0xE0, 0xFE, 0xFF, 0xED, 0xEA, 0xEA, 0xF6, 0xFF, 0xFF,
  0xF9, 0xF0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE8, 0xEA, 0xEA, 0xF6, 0xFF, 0xF1, 0xEE, 0xEE, 0xEE, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xFA, 0xFA, 0xFD, 0xFF, 0xFE, 0xE0, 0xFE, 0xFF, 0xED, 0xEA, 0xEA, 0xF6, 0xFF, 0xFF
};

const uint8_t numberBitmap[10][(8 * 8) / 8] PROGMEM = {
  {0xFF, 0xC1, 0xDD, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number0.png
  {0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number1.png
  {0xFF, 0xC5, 0xD5, 0xD1, 0xFF, 0xFF, 0xFF, 0xFF}, // number2.png
  {0xFF, 0xD5, 0xD5, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number3.png
  {0xFF, 0xF1, 0xF7, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number4.png
  {0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF}, // number5.png
  {0xFF, 0xC1, 0xD5, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF}, // number6.png
  {0xFF, 0xFD, 0xFD, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number7.png
  {0xFF, 0xC1, 0xD5, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}, // number8.png
  {0xFF, 0xD1, 0xD5, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF}  // number9.png
};

const uint8_t numberMaskBitmap[10][(8 * 8) / 8] PROGMEM = { // numberMask.png
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF},
  {0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF}
};

static const byte numberOfDieFrames = 14;
const uint8_t dieBitmap[numberOfDieFrames][(16 * 16) / 8] PROGMEM = {
  {0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die00.png
  {0xE3, 0xC3, 0x83, 0x87, 0x8F, 0x87, 0x83, 0xC3, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die01.png
  {0xC3, 0x83, 0x87, 0x87, 0x8F, 0x87, 0x87, 0x83, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die02.png
  {0xC7, 0x87, 0x87, 0x8F, 0x8F, 0x8F, 0x87, 0x87, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die03.png
  {0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die04.png
  {0x9F, 0x9F, 0x8F, 0x8F, 0x8F, 0x8F, 0x8F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die05.png
  {0xBF, 0x1F, 0x1F, 0x0F, 0x8F, 0x0F, 0x1F, 0x1F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die06.png
  {0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die07.png
  {0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die08.png
  {0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die09.png
  {0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die10.png
  {0xBB, 0xD7, 0xFE, 0x7D, 0xFF, 0x7D, 0xFE, 0xD7, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die11.png
  {0xBB, 0xD7, 0xFE, 0x7D, 0xFF, 0x7D, 0xFE, 0xD7, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // die11.png
  {0xBB, 0xD7, 0xFE, 0x7D, 0xFF, 0x7D, 0xFE, 0xD7, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // die11.png
};

static const byte numberOfDirections = 4;
static const byte numberOfPacManFrames = 4;
const uint8_t pacManBitmap[numberOfDirections][numberOfPacManFrames][(16 * 16) / 8] PROGMEM = {
  {
    {0xFF, 0x77, 0x73, 0x71, 0x21, 0x21, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeft0.png
    {0xFF, 0xFF, 0xFF, 0xF9, 0x71, 0x21, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeft1.png
    {0xFF, 0x77, 0x73, 0x71, 0x21, 0x21, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeft2.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManLeft3.png
  },
  {
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x21, 0x21, 0x71, 0x73, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRight0.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x21, 0x71, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRight1.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x21, 0x21, 0x71, 0x73, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRight2.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManRight3.png
  },
  {
    {0xFF, 0x07, 0x03, 0x01, 0x0F, 0x3F, 0x0F, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUp0.png
    {0xFF, 0x07, 0x07, 0x0F, 0x1F, 0x3F, 0x1F, 0x0F, 0x07, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUp1.png
    {0xFF, 0x07, 0x03, 0x01, 0x0F, 0x3F, 0x0F, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUp2.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManUp3.png
  },
  {
    {0xFF, 0x07, 0x03, 0x01, 0x81, 0xE1, 0x81, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDown0.png
    {0xFF, 0x07, 0x03, 0x81, 0xC1, 0xE1, 0xC1, 0x81, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDown1.png
    {0xFF, 0x07, 0x03, 0x01, 0x81, 0xE1, 0x81, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDown2.png
    {0xFF, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManDown3.png
  }
};

const uint8_t pacManMaskBitmap[numberOfDirections][numberOfPacManFrames][(16 * 16) / 8] PROGMEM = {
  {
    {0x77, 0x23, 0x21, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeftMask0.png
    {0xFF, 0xFF, 0xF9, 0x70, 0x20, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeftMask1.png
    {0x77, 0x23, 0x21, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManLeftMask2.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManLeftMask3.png
  },
  {
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x21, 0x23, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRightMask0.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x20, 0x70, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRightMask1.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x21, 0x23, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManRightMask2.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManRightMask3.png
  },
  {
    {0x07, 0x03, 0x01, 0x00, 0x01, 0x0F, 0x01, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUpMask0.png
    {0x07, 0x03, 0x03, 0x07, 0x0F, 0x1F, 0x0F, 0x07, 0x03, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUpMask1.png
    {0x07, 0x03, 0x01, 0x00, 0x01, 0x0F, 0x01, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManUpMask2.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManUpMask3.png
  },
  {
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xFC, 0xFF, 0xFC, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDownMask0.png
    {0x07, 0x03, 0x01, 0x00, 0x80, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDownMask1.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xFC, 0xFF, 0xFC, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // pacManDownMask2.png
    {0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // pacManDownMask3.png
  }
};

static const byte numberOfGhostFrames = 2;
const uint8_t ghostBitmap[numberOfGhostFrames][(16 * 16) / 8] PROGMEM = {
  {0xFF, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFE, 0xFC, 0xFC, 0xFE, 0xFC, 0xFC, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghost0.png
  {0xFF, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFE, 0xFC, 0xFC, 0xFC, 0xFE, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // ghost1.png
};

const uint8_t ghostMaskBitmap[numberOfGhostFrames][(16 * 16) / 8] PROGMEM = {
  {0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xFC, 0xF8, 0xF8, 0xFC, 0xF8, 0xF8, 0xFC, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostMask0.png
  {0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF8, 0xFC, 0xF8, 0xF8, 0xF8, 0xFC, 0xF8, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // ghostMask1.png
};

const uint8_t ghostEyeBitmap[numberOfDirections][(16 * 16) / 8] PROGMEM = {
  {0xFF, 0xD7, 0xC7, 0xC7, 0xFF, 0xD7, 0xC7, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeLeft.png
  {0xFF, 0xFF, 0xFF, 0xC7, 0xC7, 0xD7, 0xFF, 0xC7, 0xC7, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeRight.png
  {0xFF, 0xFF, 0xC7, 0xCF, 0xC7, 0xFF, 0xC7, 0xCF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeUp.png
  {0xFF, 0xFF, 0xC7, 0xE7, 0xC7, 0xFF, 0xC7, 0xE7, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // ghostEyeDown.png
};

const uint8_t ghostEyeMaskBitmap[numberOfDirections][(16 * 16) / 8] PROGMEM = {
  {0xC7, 0x83, 0x83, 0x83, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeLeftMask.png
  {0xFF, 0xFF, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeRightMask.png
  {0xFF, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEyeUpMask.png
  {0xFF, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0x83, 0x83, 0x83, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // ghostEyeDownMask.png
};

const uint8_t ghostEdibleBitmap[numberOfGhostFrames][(16 * 16) / 8] PROGMEM = {
  {0x07, 0xFB, 0xFD, 0x65, 0xA6, 0x7E, 0xA6, 0x65, 0xFD, 0xFB, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFD, 0xFB, 0xFB, 0xFD, 0xFB, 0xFB, 0xFD, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ghostEdible0.png
  {0x07, 0xFB, 0xFD, 0x65, 0xA6, 0x7E, 0xA6, 0x65, 0xFD, 0xFB, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFB, 0xFD, 0xFB, 0xFB, 0xFB, 0xFD, 0xFB, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // ghostEdible1.png
};

static const byte numberOfTiles = 24;
const uint8_t tileBitmap[numberOfTiles][8] PROGMEM = {
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // tile00.png
  {0xFF, 0xFF, 0xF3, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF}, // tile01.png
  {0xFF, 0xF3, 0xE1, 0xE1, 0xF3, 0xFF, 0xFF, 0xFF}, // tile02.png
  {0xFF, 0xE7, 0xFB, 0xED, 0xF5, 0xF5, 0xFF, 0xFF}, // tile03.png
  {0xF5, 0xF5, 0xED, 0xFB, 0xE7, 0xFF, 0xFF, 0xFF}, // tile04.png
  {0xF5, 0xF5, 0xF6, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF}, // tile05.png
  {0xFF, 0xFC, 0xFB, 0xF6, 0xF5, 0xF5, 0xFF, 0xFF}, // tile06.png
  {0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xFF, 0xFF}, // tile07.png
  {0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF}, // tile08.png
  {0xFF, 0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xFF, 0xFF}, // tile09.png
  {0xF5, 0xED, 0xFD, 0xED, 0xF5, 0xF5, 0xFF, 0xFF}, // tile10.png
  {0xF5, 0xF5, 0xEE, 0xFF, 0xE0, 0xFF, 0xFF, 0xFF}, // tile11.png
  {0xF5, 0xF6, 0xF7, 0xF6, 0xF5, 0xF5, 0xFF, 0xFF}, // tile12.png
  {0xF5, 0xF5, 0xF6, 0xF7, 0xF6, 0xF5, 0xFF, 0xFF}, // tile13.png
  {0xFF, 0xE0, 0xFF, 0xEE, 0xF5, 0xF5, 0xFF, 0xFF}, // tile14.png
  {0xFF, 0xF8, 0xF7, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF}, // tile15.png
  {0xFF, 0xFF, 0xF8, 0xF7, 0xF8, 0xFF, 0xFF, 0xFF}, // tile16.png
  {0xFF, 0xFB, 0xF5, 0xF5, 0xF5, 0xF5, 0xFF, 0xFF}, // tile17.png
  {0xFF, 0xE3, 0xFD, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF}, // tile18.png
  {0xFF, 0xFF, 0xE3, 0xFD, 0xE3, 0xFF, 0xFF, 0xFF}, // tile19.png
  {0xF5, 0xF5, 0xF5, 0xF5, 0xFB, 0xFF, 0xFF, 0xFF}, // tile20.png
  {0xF5, 0xF5, 0xF5, 0xFB, 0xFB, 0xFB, 0xFF, 0xFF}, // tile21.png
  {0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFF, 0xFF}, // tile22.png
  {0xFB, 0xFB, 0xFB, 0xF5, 0xF5, 0xF5, 0xFF, 0xFF}  // tile23.png
};

const uint8_t lifeBitmap[(8 * 8) / 8] PROGMEM = { // life.png
  0xFF, 0xEB, 0xC9, 0xC1, 0xC1, 0xE3, 0xFF, 0xFF
};

const uint8_t lifeMaskBitmap[(8 * 8) / 8] PROGMEM = { // lifeMask.png
  0xC1, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC1, 0xFF
};

const uint8_t readyBitmap[(40 * 8) / 8] PROGMEM = { // ready.png
  0xFF, 0x81, 0x81, 0xED, 0x8D, 0x91, 0xB3, 0xFF, 0x81, 0x81, 0xB5, 0xB5, 0xB5, 0xFF, 0x87, 0x83, 0xE9, 0xED, 0x81, 0x83, 0xFF, 0x81, 0x81, 0xBD, 0x99, 0x81, 0xE3, 0xFF, 0xFF, 0xF1, 0x87, 0x87, 0xF1, 0xF1, 0xFF, 0xFF, 0xA1, 0xA1, 0xF1, 0xFF
};

const uint8_t readyMaskBitmap[(40 * 8) / 8] PROGMEM = { // readyMask.png
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x70, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x20, 0x00, 0x00, 0x20, 0x00
};

const uint8_t gameOverBitmap[(64 * 8) / 8] PROGMEM = { // gameOver.png
  0xFF, 0xE7, 0xC3, 0x99, 0xBD, 0x8D, 0x8D, 0xFF, 0x87, 0x83, 0xE9, 0xED, 0x81, 0x83, 0xFF, 0x81, 0x81, 0xF3, 0xE7, 0xF3, 0x81, 0x81, 0xFF, 0x81, 0x81, 0xB5, 0xB5, 0xB5, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x81, 0xBD, 0xBD, 0x81, 0xC3, 0xFF, 0xC1, 0x81, 0xBF, 0x9F, 0xC1, 0xE1, 0xFF, 0x81, 0x81, 0xB5, 0xB5, 0xB5, 0xFF, 0x81, 0x81, 0xED, 0x8D, 0x91, 0xB3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t gameOverMaskBitmap[(64 * 8) / 8] PROGMEM = { // gameOverMask.png
  0xC3, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t highScoreBitmap[(32 * 8) / 8] PROGMEM = { // highScore.png
  0xFF, 0xC1, 0xF7, 0xC1, 0xFF, 0xC1, 0xFF, 0xF7, 0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xC1, 0xDD, 0xDD, 0xFF, 0xC1, 0xDD, 0xC1, 0xFF, 0xC1, 0xF5, 0xC9, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t highScoreMaskBitmap[(32 * 8) / 8] PROGMEM = { // highScoreMask.png
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF
};

static const int numberOfItems = 8;
const uint8_t itemBitmap[numberOfItems][(16 * 16) / 8] PROGMEM = {
  {0xFF, 0x9F, 0x4F, 0x0F, 0x97, 0x7B, 0x3B, 0x03, 0x79, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemCherry.png
  {0xFF, 0xCF, 0x07, 0xAB, 0x0B, 0x11, 0x4B, 0x0B, 0x27, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemStrawberry.png
  {0xFF, 0x1F, 0x0F, 0x07, 0x07, 0x0B, 0x01, 0x09, 0x0D, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemOrange.png
  {0xFF, 0x0F, 0x65, 0x15, 0x09, 0x13, 0x09, 0x07, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFE, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemApple.png
  {0xFF, 0xFF, 0x0F, 0x95, 0xD5, 0x05, 0x81, 0xB5, 0x37, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFD, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemMelon.png
  {0xFF, 0xE1, 0xCF, 0x17, 0xA3, 0x71, 0xA3, 0x17, 0xCF, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemGalaxian.png
  {0xFF, 0x3F, 0x0F, 0x47, 0x33, 0x09, 0x03, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemBell.png
  {0xFF, 0xFF, 0xFF, 0xF3, 0xE1, 0x05, 0x01, 0xA1, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // itemKey.png
};

const uint8_t itemMaskBitmap[numberOfItems][(16 * 16) / 8] PROGMEM = {
  {0x9F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x01, 0x01, 0x00, 0x70, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemCherryMask.png
  {0xCF, 0x07, 0x03, 0x01, 0x01, 0x00, 0x01, 0x01, 0x03, 0x07, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemStrawberryMask.png
  {0x1F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x05, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemOrangeMask.png
  {0x0F, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xFC, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemAppleMask.png
  {0xFF, 0x0F, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemMelonMask.png
  {0xE1, 0xC0, 0x01, 0x03, 0x01, 0x00, 0x01, 0x03, 0x01, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemGalaxianMask.png
  {0x3F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // itemBellMask.png
  {0xFF, 0xFF, 0xF3, 0xE1, 0x00, 0x00, 0x00, 0x00, 0xA1, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // itemKeyMask.png
};

class PacMan : public Game {
  private:
    static const byte numberOfRows = 27;
    static const byte numberOfColumns = 21;
    const byte initialWorld[numberOfRows][numberOfColumns] {
      //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
      { 3,  7,  7,  7,  7,  7,  7,  7,  7,  7, 10,  7,  7,  7,  7,  7,  7,  7,  7,  7,  4}, //  0
      { 8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9}, //  1
      { 8,  1,  3,  7,  4,  1,  3,  7,  4,  1,  8,  1,  3,  7,  4,  1,  3,  7,  4,  1,  9}, //  2
      { 8,  2,  8,  0,  9,  1,  8,  0,  9,  1,  8,  1,  8,  0,  9,  1,  8,  0,  9,  2,  9}, //  3
      { 8,  1,  6,  7,  5,  1,  6,  7,  5,  1, 15,  1,  6,  7,  5,  1,  6,  7,  5,  1,  9}, //  4
      { 8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9}, //  5
      { 8,  1,  3,  7,  4,  1, 18,  1,  3,  7,  7,  7,  4,  1, 19,  1,  3,  7,  4,  1,  9}, //  6
      { 8,  1,  6,  7,  5,  1,  8,  1,  6,  7, 10,  7,  5,  1,  9,  1,  6,  7,  5,  1,  9}, //  7
      { 8,  1,  1,  1,  1,  1,  8,  1,  1,  1,  8,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9}, //  8
      { 6,  7,  7,  7,  4,  1, 14,  7, 20,  0, 15,  0, 17,  7, 11,  1,  3,  7,  7,  7,  5}, //  9
      { 0,  0,  0,  0,  9,  1,  8,  0,  0,  0,  0,  0,  0,  0,  9,  1,  8,  0,  0,  0,  0}, // 10
      { 0,  0,  0,  0,  9,  1,  8,  0,  3, 21, 22, 23,  4,  0,  9,  1,  8,  0,  0,  0,  0}, // 11
      {17,  7,  7,  7,  5,  1, 15,  0,  8,  0,  0,  0,  9,  0, 16,  1,  6,  7,  7,  7, 20}, // 12
      { 0,  0,  0,  0,  0,  1,  0,  0,  8,  0,  0,  0,  9,  0,  0,  1,  0,  0,  0,  0,  0}, // 13
      {17,  7,  7,  7,  4,  1, 18,  0,  6,  7,  7,  7,  5,  0, 19,  1,  3,  7,  7,  7, 20}, // 14
      { 0,  0,  0,  0,  9,  1,  8,  0,  0,  0,  0,  0,  0,  0,  9,  1,  8,  0,  0,  0,  0}, // 15
      { 0,  0,  0,  0,  9,  1,  8,  0,  3,  7,  7,  7,  4,  0,  9,  1,  8,  0,  0,  0,  0}, // 16
      { 3,  7,  7,  7,  5,  1, 15,  0,  6,  7, 10,  7,  5,  0, 16,  1,  6,  7,  7,  7,  4}, // 17
      { 8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9}, // 18
      { 8,  1, 17,  7,  4,  1, 17,  7, 20,  1, 15,  1, 17,  7, 20,  1,  3,  7, 20,  1,  9}, // 19
      { 8,  2,  1,  1,  9,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  8,  1,  1,  2,  9}, // 20
      {14,  7,  4,  1,  9,  1, 18,  1,  3,  7,  7,  7,  4,  1, 19,  1,  8,  1,  3,  7, 11}, // 21
      {14,  7,  5,  1, 16,  1,  8,  1,  6,  7, 10,  7,  5,  1,  9,  1, 15,  1,  6,  7, 11}, // 22
      { 8,  1,  1,  1,  1,  1,  8,  1,  1,  1,  8,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9}, // 23
      { 8,  1, 17,  7,  7,  7, 12,  7, 20,  1, 15,  1, 17,  7, 13,  7,  7,  7, 20,  1,  9}, // 24
      { 8,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9}, // 25
      { 6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  5}  // 26
    };

    typedef struct TileStruct {
      int row;
      int column;
    } Tile;

    typedef enum {
      SOUND_NONE,
      SOUND_EAT_DOT,
      SOUND_EAT_ITEM,
      SOUND_EAT_GHOST,
      SOUND_EAT_POWER_PELLET,
      SOUND_DIE,
      SOUND_DISAPPEAR,
      SOUND_VOLUME
    } SoundType;

    typedef enum {
      GAME_MODE_TITLE,
      GAME_MODE_READY,
      GAME_MODE_PLAY,
      GAME_MODE_DIE,
      GAME_MODE_SUCCESS,
      GAME_MODE_GAME_OVER
    } GameMode;

    typedef enum {
      TILE_TYPE_SPACE,
      TILE_TYPE_DOT,
      TILE_TYPE_POWER_PELLET,
      TILE_TYPE_DOOR = 22
    } TitleType;

    typedef enum {
      DIRECTION_NONE = -1,
      DIRECTION_LEFT,
      DIRECTION_RIGHT,
      DIRECTION_UP,
      DIRECTION_DOWN
    } MoveDirection;

    typedef enum {
      GHOST_STATE_WAIT,
      GHOST_STATE_GO,
      GHOST_STATE_RUN,
      GHOST_STATE_DIE
    } GhostState;

    typedef enum {
      ITEM_CHERRY,
      ITEM_STRAWBERRY,
      ITEM_ORANGE,
      ITEM_APPLE,
      ITEM_MELON,
      ITEM_GALAXIAN,
      ITEM_BELL,
      ITEM_KEY
    } ItemType;

    // game
    Point screenCenter;
    int gameMode;
    const float maxReadyTime = 5000.0f;
    float readyTime;
    Point readyPosition;
    const float gameNormalSpeed = 25.0f / 1000.0f;
    float gameSpeed;
    static const int numberOfLevels = 256;
    int level;
    float successTime;
    float gameOverTime;
    Point gameOverPosition;
    float titleTime;
    bool isAutoPlay;

    // score
    const Size numberSize = {5, 7};
    bool isAwardExtraLife;

    // item
    const Size itemSize = {11, 11};
    Tile itemTile;
    Point itemPosition;
    int itemIndex;
    String itemPointString;
    Size itemPointSize;
    Point itemPointPosition;
    float itemVisibledTime;
    const int itemPoint[numberOfItems] = {100, 300, 500, 700, 1000, 2000, 3000, 5000};
    static const int maxItems = 13;
    const int item[maxItems] = {
      ITEM_CHERRY,
      ITEM_STRAWBERRY,
      ITEM_ORANGE,
      ITEM_ORANGE,
      ITEM_APPLE,
      ITEM_APPLE,
      ITEM_MELON,
      ITEM_MELON,
      ITEM_GALAXIAN,
      ITEM_GALAXIAN,
      ITEM_BELL,
      ITEM_BELL,
      ITEM_KEY
    };

    // world
    const Size statusBarSize = {128, 0};
    const Size tileSize = {6, 5};
    const Size worldPixelSize = {tileSize.width * numberOfColumns, (tileSize.height * numberOfRows) + 1.0f};
    Point worldPosition;
    byte world[numberOfRows][numberOfColumns];
    float worldStartPosition;
    Tile availabledTile;
    const int directionOrderUpperLeft[numberOfDirections] = {DIRECTION_DOWN, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_LEFT};
    const int directionOrderUpperRight[numberOfDirections] = {DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_UP, DIRECTION_RIGHT};
    const int directionOrderLowerLeft[numberOfDirections] = {DIRECTION_UP, DIRECTION_RIGHT, DIRECTION_DOWN, DIRECTION_LEFT};
    const int directionOrderLowerRight[numberOfDirections] = {DIRECTION_UP, DIRECTION_LEFT, DIRECTION_DOWN, DIRECTION_RIGHT};

    // pac-man
    const Size pacManSize = {11, 11};
    Point pacManPosition;
    int pacManDirection;
    int pacManNextDirection;
    const float pacManAnimationSpeed = 15.0f / 1000.0f;
    float pacManFrame;
    bool isPacManStoped;
    Tile pacManTile;
    Tile pacManLastTile;
    static const byte startPacManLives = 3;
    byte numberOfPacManLives;
    bool isPacManVisibled;
    const float minPowerPelletTime = 3000.0f;
    float maxPowerPelletTime;
    float powerPelletTime;
    int dotCounter;
    int numberOfDots;
    float pacManDieTime;
    float pacManDieFrame;
    bool isPacManDisappeared;
    const float pacManMaxIncreseSpeed = 3.0f;
    float pacManIncreseSpeed;
    const float pacManMaxIncreseSpeedTime = 1000.0f;
    float pacManIncreseSpeedTime;

    // ghost
    const Size ghostSize = {11, 11};
    Point ghostPosition[numberOfGhosts];
    int ghostDirection[numberOfGhosts];
    int ghostNextDirection[numberOfGhosts];
    const float ghostAnimationSpeed = 9.0f / 1000.0f;
    float ghostFrame[numberOfGhosts];
    bool isGhostStoped[numberOfGhosts];
    Tile ghostTile[numberOfGhosts];
    Tile ghostLastTile[numberOfGhosts];
    bool isGhostVisibled[numberOfGhosts];
    float ghostWaitTime[numberOfGhosts];
    const float maxGhostRandomTime = 4000.0f;
    float ghostRandomTime[numberOfGhosts];
    bool isRandomGhostPath[numberOfGhosts];
    bool isRunaway[numberOfGhosts];
    int ghostState[numberOfGhosts];
    static const int ghostMaxPaths = numberOfRows * 2;
    Tile ghostPath[numberOfGhosts][ghostMaxPaths];
    int ghostNumberOfPaths[numberOfGhosts];
    int ghostCurrentPath[numberOfGhosts];
    bool isGhostEdible[numberOfGhosts];
    const int ghostEdiblePoint[numberOfGhosts] = {200, 400, 800, 1600};
    int ghostEdiblePointIndex;
    float ghostEdiblePointVisibledTime;
    String ghostEdiblePointString;
    Size ghostEdiblePointSize;
    Point ghostEdiblePointPosition;
    int ghostEdiblePointGhost;
    const Tile cornerTile[4] = {{1, 1}, {1, 19}, {25, 1}, {25, 19}}; // upper left, upper right, lower left, lower right

    void addDotCounter(int value);
    void addGhostPath(int i, Tile tile);
    void addScore(unsigned long value);
    void changeGameMode(int mode);
    void chasePacMan(int i);
    void eat(Tile tile);
    void eatGhost(int i);
    void eatPowerPellet();
    void exitAutoPlay();
    int getDirection(Tile fromTile, Tile toTile);
    Game::Point getPositionFromTile(Tile tilePos, Size size);
    PacMan::Tile getTileFromPosition(Point pos, Size size);
    void ghostDie(int i);
    bool isCollideGhost(int i);
    bool isGhostPath(int i);
    bool isJustMoveToNewTile(Tile currentTile, Tile lastTile);
    bool isTileAvailabled(int direction, Tile tile, bool isDoorTileEnabled = true);
    bool isWallTile(Tile tile, bool isDoorTileEnabled = true);
    void newLevel();
    bool pathFinding(int i, Tile targetTile, bool isDoorTileEnabled = true);
    void playSound(int index);
    void pressButton();
    bool readGhostPath(int i);
    void renderEdibleGhost();
    void renderGhost();
    void renderHUD();
    void renderItem();
    void renderPacMan();
    void renderTitle();
    void renderWorld();
    void resetGame();
    void resetGhostPath(int i);
    void resetPacManIncreseSpeed();
    void restartLevel();
    bool randomGhostPath(int i);
    void scrollWorldToPacManPosition();
    void scrollWorldToPosition(float y);
    void setRandomGhostPath(int i, bool runaway);
    void spawnGhost(int i, Tile tile, int state, int direction, int waitTime = 0.0f);
    void updateGhost();
    void updatePacMan();
    void updateTitle();

  public:
    PacMan();
    bool isBackToMenuEnabled();
    void update();
    void render();
};
}

#endif
