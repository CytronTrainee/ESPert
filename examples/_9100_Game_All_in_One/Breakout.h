// Breakout Simulator for ESPresso Lite

#ifndef _GAME_BREAKOUT_H_
#define _GAME_BREAKOUT_H_

#include "Game.h"

namespace breakout {
// OLED bitmaps - Image to Adafruit OLED Bitmap Converter http://www.majer.ch/lcd/adf_bitmap.php
const uint8_t ballBitmap[(8 * 8) / 8] PROGMEM = { // ball.png
  0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t brickBitmap[4][(16 * 8) / 8] PROGMEM = {
  {0xF9, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // brick0.png
  {0xF9, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF6, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // brick1.png
  {0xF9, 0xF0, 0xF0, 0xF0, 0xF6, 0xF6, 0xF0, 0xF0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // brickItem0.png
  {0xF9, 0xF6, 0xF6, 0xF6, 0xF0, 0xF0, 0xF6, 0xF6, 0xF6, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // brickItem1.png
};

const uint8_t breakoutBitmap[(128 * 32) / 8] PROGMEM = { // breakout.png
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F,
  0x1F, 0x0F, 0x07, 0x0B, 0x15, 0xAB, 0xD5, 0xEA, 0xFD, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
  0x0F, 0x01, 0x01, 0x31, 0x39, 0x39, 0x39, 0x19, 0x01, 0x43,
  0xC3, 0xFF, 0x7F, 0x0F, 0x01, 0x01, 0x71, 0x79, 0x79, 0x79,
  0x39, 0x01, 0x01, 0xC3, 0xFF, 0x7F, 0x0F, 0x01, 0x01, 0x31,
  0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0xF9, 0xFF, 0xFF, 0x7F,
  0x1F, 0x0F, 0x83, 0xC1, 0xF1, 0x01, 0x01, 0x0F, 0xFF, 0xFF,
  0x7F, 0x0F, 0x01, 0x01, 0x71, 0x3F, 0x1F, 0x0F, 0x07, 0xE3,
  0xF1, 0xF9, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x03,
  0x63, 0xF1, 0xF1, 0x61, 0x01, 0x02, 0x02, 0x04, 0x18, 0xF0,
  0xFC, 0x1E, 0x01, 0x01, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
  0x01, 0x01, 0xE1, 0xFF, 0xFB, 0xF1, 0xF1, 0x11, 0x01, 0x01,
  0xE1, 0xF1, 0xF1, 0xF1, 0xF9, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xC0, 0xC0, 0x40,
  0x48, 0x4F, 0x4F, 0x4F, 0x4F, 0x47, 0x40, 0x60, 0x70, 0x7F,
  0x40, 0x40, 0x40, 0x78, 0x7E, 0x7E, 0x7C, 0x70, 0x41, 0x43,
  0x4F, 0x7F, 0x7F, 0x40, 0x40, 0x40, 0x48, 0x4F, 0x4F, 0x4F,
  0x4F, 0x4F, 0x4F, 0x7F, 0x5F, 0x47, 0x41, 0x60, 0x78, 0x78,
  0x79, 0x79, 0x79, 0x78, 0x40, 0x40, 0x43, 0x7F, 0x40, 0x40,
  0x40, 0x78, 0x7C, 0x7E, 0x7F, 0x7C, 0x70, 0xC0, 0xC3, 0x4F,
  0xBF, 0x1F, 0x0F, 0x07, 0x03, 0x06, 0x88, 0xD0, 0x70, 0x60,
  0x60, 0x64, 0x62, 0x70, 0x70, 0x78, 0x7E, 0x7F, 0x7F, 0x70,
  0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x63, 0x60, 0x70, 0x7C,
  0x7F, 0x7F, 0x7F, 0x47, 0x40, 0x40, 0x40, 0x78, 0x7F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xFC,
  0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
  0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
  0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
  0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
  0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4,
  0xF4, 0xFC, 0xFC, 0xFE, 0xEF, 0xD5, 0xEA, 0xF5, 0xEA, 0xF5,
  0xFA, 0xFC, 0xFE, 0x47, 0x55, 0x14, 0xFC, 0x14, 0xFC, 0x1C,
  0xDC, 0x3C, 0xDC, 0x1C, 0xFC, 0x1C, 0x7C, 0x1C, 0xFC, 0x04,
  0xFC, 0x5C, 0x5C, 0x3C, 0xFC, 0x04, 0x6C, 0xFC, 0x1C, 0x5C,
  0x1C, 0xFC, 0x1C, 0xDC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF
};

const uint8_t bulletBitmap[2][(8 * 8) / 8] PROGMEM = {
  {0xF1, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // bullet0.png
  {0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // bullet1.png
};

const uint8_t gameOverBitmap[(32 * 8) / 8] PROGMEM = { // gameOver.png
  0xE0, 0xEA, 0xE2, 0xFF, 0xE0, 0xFA, 0xE0, 0xFF, 0xE0, 0xFD, 0xE0, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xFF, 0xE0, 0xEE, 0xE0, 0xFF, 0xF0, 0xEF, 0xF0, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xE0, 0xFA, 0xE4
};

const uint8_t getReadyBitmap[(32 * 8) / 8] PROGMEM = { // getReady.png
  0xE0, 0xEA, 0xE2, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xFE, 0xE0, 0xFE, 0xFF, 0xFF, 0xE0, 0xFA, 0xE4, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xE0, 0xFA, 0xE0, 0xFF, 0xE0, 0xEE, 0xF1, 0xFF, 0xF8, 0xE3, 0xF8
};

const uint8_t goBitmap[(8 * 8) / 8] PROGMEM = { // go.png
  0xE0, 0xEA, 0xE2, 0xFF, 0xE0, 0xEE, 0xE0, 0xFF
};

const uint8_t itemBitmap[3][(8 * 8) / 8] PROGMEM = {
  {0xE3, 0xC9, 0x88, 0x88, 0x88, 0xC9, 0xE3, 0xFF}, // item0.png
  {0xE3, 0xC1, 0x8C, 0x8C, 0x90, 0xC1, 0xE3, 0xFF}, // item1.png
  {0xE3, 0xC1, 0x80, 0xBE, 0x80, 0xC1, 0xE3, 0xFF}  // item2.png
};

const uint8_t levelClearedBitmap[(64 * 8) / 8] PROGMEM = { // levelCleared.png
  0xE0, 0xEF, 0xEF, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xF0, 0xEF, 0xF0, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xE0, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xEE, 0xEE, 0xFF, 0xE0, 0xEF, 0xEF, 0xFF,
  0xE0, 0xEA, 0xEA, 0xFF, 0xE0, 0xFA, 0xE0, 0xFF, 0xE0, 0xFA, 0xE4, 0xFF, 0xE0, 0xEA, 0xEA, 0xFF, 0xE0, 0xEE, 0xF1, 0xFF, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t numberBitmap[10][(8 * 8) / 8] PROGMEM = {
  {0xE0, 0xEE, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number0.png
  {0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number1.png
  {0xE2, 0xEA, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number2.png
  {0xEA, 0xEA, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number3.png
  {0xF8, 0xFB, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number4.png
  {0xE8, 0xEA, 0xE2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number5.png
  {0xE0, 0xEA, 0xE2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number6.png
  {0xFE, 0xFE, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number7.png
  {0xE0, 0xEA, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // number8.png
  {0xE8, 0xEA, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // number9.png
};

const uint8_t paddleBitmap[6][(32 * 8) / 8] PROGMEM = {
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // paddle0.png
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xE2, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xE2, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF}, // paddle1.png
  {0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xE2, 0xE2, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xE2, 0xE2, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF}, // paddle2.png
  {0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xE2, 0xE2, 0xF2, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xF2, 0xE2, 0xE2, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF}, // paddle3.png
  {0xFF, 0xFC, 0xF8, 0xF0, 0xE2, 0xE2, 0xFA, 0xF2, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xF2, 0xFA, 0xE2, 0xE2, 0xF0, 0xF8, 0xFC, 0xFF}, // paddle4.png
  {0xFF, 0xF8, 0xF0, 0xE0, 0xC2, 0xC2, 0xFA, 0xF2, 0xE2, 0xC2, 0xE2, 0xFA, 0xFA, 0xF2, 0xE2, 0xE2, 0xE2, 0xE2, 0xF2, 0xFA, 0xFA, 0xE2, 0xC2, 0xE2, 0xF2, 0xFA, 0xC2, 0xC2, 0xE0, 0xF0, 0xF8, 0xFF}  // paddle5.png
};

const uint8_t statusBarBitmap[2][(128 * 8) / 8] PROGMEM = {
  { // statusBar0.png
    0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xE1, 0xDF, 0xE1, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xD5, 0xEB, 0xFF, 0xC1, 0xF5, 0xC1, 0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xC1, 0xDF,
    0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xC1, 0xDD, 0xDD,
    0xFF, 0xC1, 0xDD, 0xC1, 0xFF, 0xC1, 0xF5, 0xC9, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  },
  { // statusBar1.png
    0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xE1, 0xDF, 0xE1, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xD5, 0xEB, 0xFF, 0xC1, 0xF5, 0xC1, 0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xC1, 0xDF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD1,
    0xD5, 0xC5, 0xFF, 0xC1, 0xDD, 0xDD, 0xFF, 0xC1, 0xDD, 0xC1, 0xFF, 0xC1, 0xF5, 0xC9, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xF5, 0xFD, 0xFF, 0xC1, 0xF5, 0xF1, 0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  }
};

const uint8_t statusBarBackgroundBitmap[(128 * 8) / 8] PROGMEM = { // statusBarBackground.png
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
};

const uint8_t highScoreBitmap[(32 * 8) / 8] PROGMEM = { // highScore.png
  0xFF, 0xC1, 0xF7, 0xC1, 0xFF, 0xC1, 0xFF, 0xF7, 0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xC1, 0xDD, 0xDD, 0xFF, 0xC1, 0xDD, 0xC1, 0xFF, 0xC1, 0xF5, 0xC9, 0xFF, 0xC1, 0xD5, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF
};

const uint8_t wallBitmap[(8 * 64) / 8] PROGMEM = { // wall.png
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

class Breakout : public Game {
  private:
    // level
    static const int numberOfLevels = 6;
    static const int numberOfRows = 5;
    static const int numberOfColumns = 11;

    // xx = brickType + itemType, for examples 10 = brick 1 + no item, 21 = brick 2 + item 1, 00 = empty
    const int levelTable[numberOfLevels][numberOfRows][numberOfColumns] = {
      { // level 01
        {10, 10, 10, 10, 10, 12, 10, 10, 10, 10, 10},
        {10, 10, 11, 10, 10, 10, 10, 10, 13, 10, 10},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00}
      },
      { // level 02
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
        {13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00}
      },
      { // level 03
        {23, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00}
      },
      { // level 04
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
        {20, 20, 22, 20, 20, 20, 20, 20, 23, 20, 20},
        {11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00}
      },
      { // level 05
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
        {20, 20, 20, 20, 20, 23, 20, 20, 20, 20, 20},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
        {00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00}
      },
      { // level 06
        {20, 20, 20, 20, 20, 22, 20, 20, 20, 20, 20},
        {23, 20, 20, 20, 20, 21, 20, 20, 20, 20, 20},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13},
        {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
        {11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}
      }
    };

    typedef enum {
      GAME_MODE_TITLE,
      GAME_MODE_TITLE_BLINK,
      GAME_MODE_GET_READY,
      GAME_MODE_PLAY,
      GAME_MODE_MISS,
      GAME_MODE_LEVEL_CLEARED,
      GAME_MODE_GAME_OVER
    } GameMode;

    typedef enum {
      SOUND_LAUNCH_BALL,
      SOUND_HIT_PADDLE,
      SOUND_HIT_BORDER,
      SOUND_HIT_BLOCK,
      SOUND_MISS,
      SOUND_VOLUME
    } SoundType;

    typedef enum {
      ITEM_TYPE_NONE,
      ITEM_TYPE_EXPAND,
      ITEM_TYPE_BALL,
      ITEM_TYPE_BULLET
    } ItemType;

    // game
    const float maxTitleBlinkTime = 3000.0f;
    const float maxGetReadyTime = 6000.0f;
    const float maxMissTime = 3000.0f;
    const float maxGameOverTimeOut = 5000.0f;
    const float maxLevelClearedTime = 3000.0f;
    const int screenRect[4] = {1, 7, 126, 63}; // left, top, right, bottom
    int gameMode;
    float titleBlinkTime;
    float getReadyTime;
    float missTime;
    bool miss;
    float gameOverTimeOut;
    float levelClearedTime;
    bool isReadyToPlay;
    static const int infoY = 8;
    float titleTime;
    bool isAutoPlay;
    float autoPlayPaddlePosition;
    float autoPlayPaddleLerpSpeed;

    // paddle
    const float paddleSpeed = 150.0f / 1000.0f;
    const float paddleExpandSpeed = 7.0f / 1000.0f;
    const float maxPaddleExpandTimeOut = 10000.0f;
    float paddleExpandTimeOut;
    static const int numberOfPaddleTypes = 6;
    const Size paddleSize[numberOfPaddleTypes] = {{22, 6}, {24, 6}, {26, 6}, {28, 6}, {30, 6}, {30, 6}};
    float paddleType;
    bool isPaddleExpand;
    Point paddlePosition;
    bool isUpdatePaddlePosition;

    // ball
    static const int mainBall = 0;
    static const int newGameBallLeft = 3;
    const float defaultBallSpeed = 20.0f / 1000.0f;
    const Size ballSize = {2, 2};
    int ballLeft;
    const uint8_t* ballDigitImage;
    const Point ballDigitPosition = {69, 1};
    static const int maxBall = 3;
    int numberOfBalls;
    bool isBallCollide[maxBall][2];
    float ballPosition[maxBall][2];
    int ballDirection[maxBall][2];
    float ballSpeed[maxBall];
    int ballHitCount[maxBall];
    int ballHitRowFirstTimeFlag[maxBall][numberOfRows];

    // brick
    static const int numberOfBrickType = 2;
    const int defaultBrickPower[numberOfBrickType] = {1, 2};
    const uint8_t* brickImage[numberOfRows][numberOfColumns];
    int brickScore[numberOfRows];
    Point brickPosition[numberOfRows][numberOfColumns];
    int brickPower[numberOfRows][numberOfColumns];
    const Size brickSize = {10, 4};
    const Point brickGap = {1, 1};
    const Point brickStartPosition = {4, 14};
    int brickCount;
    float rowFirstHitSpeed[numberOfRows];

    // level
    int level;
    int currentLevelTable[numberOfRows][numberOfColumns];
    const uint8_t* levelDigitImage[2];
    const Point levelDigitPosition[2] = {{24, 1}, {28, 1}};
    int rowCount;
    bool isUpdateRowCounter;

    // score
    const uint8_t* scoreDigitImage[4];
    const uint8_t* highScoreDigitImage[4];

    // bullet
    const float maxBulletTimeOut = 10000.0f;
    float bulletTimeOut;
    static const int numberOfBullets = 8;
    const uint8_t* bulletImage[numberOfBullets];
    bool isBulletCollide[numberOfBullets];
    const Size bulletSize = {2, 5};
    const float maxBulletSpawnTime = 1000.0f;
    float bulletSpawnTime;
    const float bulletSpeed = 40.0f / 1000.0f;
    Point bulletPosition[numberOfBullets];
    bool isBulletEnabled;

    // item
    int itemCount;
    const Size itemSize = {7, 7};
    const float itemSpeed = 10.0f / 1000.0f;
    static const int numberOfItems = 5;
    const uint8_t* itemImage[numberOfItems];
    int itemType[numberOfItems];
    Point itemPosition[numberOfItems];
    bool isItemCollide[numberOfItems];
    const float maxAddBallBlinkTime = 3000.0f;
    float addBallBlinkTime;

    void addBall(int value);
    void addScore(int value);
    void changeGameMode(int mode);
    void checkButtons();
    void checkHighScore();
    void deleteItem(int i);
    bool isHitBrick(int x, int y, int width, int height, int directionX, int directionY, int ball = -1);
    void loadLevel();
    void playLoop();
    void playSound(int index);
    void pressButton();
    void resetGame();
    void setBallImages();
    void setHighScoreImages();
    void setLevelImages();
    void setScoreImages();
    void updatePaddle();

  public:
    Breakout();
    bool isBackToMenuEnabled();
    void update();
    void render();
};
}

#endif
