#ifndef _GAME_H_
#define _GAME_H_

#include <ESPert.h>

static const int numberOfGames = 4;

class Game {
  public:
    typedef enum {
      GAME_UNKNOWN = -1,
      GAME_PAC_MAN,
      GAME_FLAPPY_BIRD,
      GAME_BREAKOUT,
      GAME_OCTOPUS,
    } GameIndex;

    GameIndex gameIndex;
    const unsigned long maxScore[numberOfGames] = {999999l, 999l, 9999l, 999l}; // GAME_PAC_MAN, ..., GAME_OCTOPUS

    typedef struct SizeStruct {
      int width;
      int height;
    } Size;

    typedef struct PointStruct {
      float x;
      float y;
    } Point;

    typedef enum {
      BUTTON_NONE = -1,
      BUTTON_LEFT,
      BUTTON_RIGHT,
      BUTTON_UP,
      BUTTON_DOWN,
      BUTTON_A,
      BUTTON_B
    } ButtonType;

    // OLED bitmaps - Image to Adafruit OLED Bitmap Converter http://www.majer.ch/lcd/adf_bitmap.php
    const uint8_t batteryBitmap[(16 * 8) / 8] = { // battery.png
      0x00, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x00, 0xC3, 0xFF
    };

    const uint8_t batteryIndicatorBitmap[(8 * 8) / 8] = { // batteryIndicator.png
      0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    };

    static const int numberOfVolumeFrames = 4;
    const uint8_t volumeBitmap[numberOfVolumeFrames][(16 * 8) / 8] {
      {0xE7, 0xE7, 0xC3, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // volume0.png
      {0xE7, 0xE7, 0xC3, 0x81, 0xFF, 0xDB, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // volume1.png
      {0xE7, 0xE7, 0xC3, 0x81, 0xFF, 0xDB, 0xE7, 0xBD, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // volume2.png
      {0xE7, 0xE7, 0xC3, 0x81, 0xFF, 0xDB, 0xE7, 0xBD, 0xC3, 0x7E, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}  // volume3.png
    };

    const uint8_t fpsBitmap[(16 * 8) / 8] { // fps.png
      0xFF, 0xC1, 0xF5, 0xFD, 0xFF, 0xC1, 0xF5, 0xF1, 0xFF, 0xD1, 0xD5, 0xC5, 0xFF, 0xFF, 0xFF, 0xFF
    };

    const uint8_t fpsMaskBitmap[(16 * 8) / 8] { // fpsMask.png
      0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF
    };

    const uint8_t makerAsiaBitmap[(64 * 16) / 8] = { // makerAsia.png
      0xFF, 0x87, 0x03, 0x4B, 0x31, 0x31, 0x4B, 0x03, 0x87, 0xFF,
      0xFF, 0x07, 0xF7, 0x8F, 0xF7, 0x07, 0xFF, 0x07, 0xD7, 0x07,
      0xFF, 0x07, 0xDF, 0x27, 0xFF, 0x07, 0x57, 0x57, 0xFF, 0x07,
      0xD7, 0x27, 0xFF, 0x07, 0xD7, 0x07, 0xFF, 0x47, 0x57, 0x17,
      0xFF, 0x07, 0xFF, 0x07, 0xD7, 0x07, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    };

    const uint8_t makerAsiaMaskBitmap[(64 * 16) / 8] = { // makerAsiaMask.png
      0x87, 0x03, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x03, 0x87,
      0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x03, 0x03, 0x03,
      0x07, 0x03, 0x07, 0x03, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03,
      0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
      0x07, 0x03, 0x07, 0x03, 0x03, 0x03, 0x07, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xFC,
      0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE,
      0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE,
      0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE,
      0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE,
      0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    };

    const Size screenSize = {128, 64};
    bool isRequestingExit;
    static const int maxBlinkTime = 500;
    const String saveDataKey = "Game";
    static const int saveDataHeaderSize = 32;
    bool isMenuEnabled;

    // game time
    unsigned long lastFrameTime;
    float elapsedTime;
    float blinkTime;

    // frame rate
    unsigned long frameRate;
    unsigned long frameCount;
    unsigned long fpsLastFrameTime;
    bool isFPSVisibled;
    int fpsDigit[2];

    // button
    static const int numberOfButtons = 6;
    static const int maxButtonDelay = 10;
    int buttonPin[numberOfButtons];
    ESPert_Button button[numberOfButtons];
    bool isGamepadEnabled;
    float buttonDelay = 0.0f;
    bool isButtonPressed[numberOfButtons];
    int pressedButton;
    bool isButtonAllowed;

    // sound
    const Size volumeSize = {13, 11};
    static const int volumeLength = 4;
    float soundDuration;
    int nextSound;
    float nextSoundDelay;
    float volume;
    bool isVolumeChanged;
    bool isSoundInterruptEnabled;
    bool isSoundEnabled = true;

    // battery
    const Size batterySize = {15, 8};
    float battery;
    float batteryVoltage;

    // score
    unsigned long highScore;
    unsigned long score;
    int highScoreAddress;

    ESPert* espert;

    void drawBitmap(int x, int y, int width, int height, const uint8_t* bitmap, const uint8_t* mask = NULL, int color = ESPERT_WHITE);
    String floatToString(float value, int length, int decimalPalces);
    int getHighScoreAddress();
    bool isBlink(float factor = 1.0f);
    float lerp(float t, float v0, float v1);
    String longToString(unsigned long value, int length, String prefixChar = "0");
    virtual void playSound(int index);
    virtual void pressButton();
    unsigned long readHighScore(int offset = 0);
    void readVolume();
    void renderBattery(int x, int y, int color = ESPERT_WHITE);
    void renderVolume(int x, int y, int color = ESPERT_WHITE);
    void renderFPS(int x, int y, int bitmapWidth, int bitmapHeight, int gap, const uint8_t* numberBitmap, const uint8_t *numberMaskBitmap = NULL, int color = ESPERT_WHITE, int fpsBitmapX = -1, int fpsBitmapY = -1);
    void renderMakerAsia(int x, int y, int color = ESPERT_WHITE);
    void resetGameTime();
    void updateGameTime(bool updateButton = true);
    void writeHighScore(int offset = 0);
    void writeVolume();

  public:
    Game();
    Game::GameIndex getGameIndex();
    void init(ESPert* e, bool menu = false);
    virtual bool isBackToMenuEnabled();
    bool isExit();
    virtual void update();
    virtual void render();
};

#endif
